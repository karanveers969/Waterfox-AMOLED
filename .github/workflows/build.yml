name: Build and Release AMOLED Waterfox
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"  # Fixed: removed extra asterisk

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11  # Changed to JDK 11 as shown in your logs
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          
      - name: Get latest Waterfox release version
        id: waterfox_version
        run: |
          VERSION=$(curl -s https://api.github.com/repos/WaterfoxCo/Waterfox-Android/releases/latest | jq -r '.tag_name')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Latest Waterfox version: $VERSION"
          
      - name: Check if release already exists
        id: check_release
        run: |
          if gh release view "${{ steps.waterfox_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release already exists, skipping build"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release does not exist, proceeding with build"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Checkout repo
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/checkout@v4
        
      - name: Set up Android SDK
        if: steps.check_release.outputs.exists == 'false'
        uses: android-actions/setup-android@v3
        
      - name: Install Android build tools
        if: steps.check_release.outputs.exists == 'false'
        run: |
          yes | sdkmanager --licenses
          sdkmanager "build-tools;34.0.0"
          echo "$ANDROID_HOME/build-tools/34.0.0" >> $GITHUB_PATH
          
      - name: Set up signing key
        if: steps.check_release.outputs.exists == 'false'
        run: |
          echo "${{ secrets.SIGNING_KEY }}" | base64 -d > keystore.jks
          echo "STORE_FILE=keystore.jks" >> $GITHUB_ENV
          echo "STORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV
          
      # Build armeabi-v7a
      - name: Patch armeabi-v7a
        if: steps.check_release.outputs.exists == 'false'
        run: |
          chmod +x ./build.sh
          ./build.sh armeabi-v7a
          
      - name: Generate debug keystore if missing
        if: steps.check_release.outputs.exists == 'false'
        run: |
          if [ ! -f keystore.jks ]; then
            echo "Generating debug keystore..."
            keytool -genkeypair -alias debug -keyalg RSA -keysize 2048 -validity 365 \
              -keystore keystore.jks -storepass android -keypass android \
              -dname "CN=Debug, OU=Debug, O=Debug, L=Debug, S=Debug, C=US"
            echo "STORE_PASSWORD=android" >> $GITHUB_ENV
            echo "KEY_ALIAS=debug" >> $GITHUB_ENV
            echo "KEY_PASSWORD=android" >> $GITHUB_ENV
          fi
          
      - name: Sign APKs
        if: steps.check_release.outputs.exists == 'false'
        run: |
          # Find the actual APK file generated by the build script
          APK_FILE=$(find . -name "*.apk" -type f | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "No APK file found!"
            ls -la
            exit 1
          fi
          
          echo "Found APK: $APK_FILE"
          
          # Sign the APK
          apksigner sign \
            --ks $STORE_FILE \
            --ks-pass pass:$STORE_PASSWORD \
            --key-pass pass:$KEY_PASSWORD \
            --ks-key-alias $KEY_ALIAS \
            --out armeabi-v7a-signed.apk \
            "$APK_FILE"
            
      # Build arm64-v8a
      - name: Clean workspace
        if: steps.check_release.outputs.exists == 'false'
        run: |
          # Clean up previous build artifacts but keep signed APK and keystore
          find . -name "*.apk" ! -name "*-signed.apk" -delete
          
      - name: Patch arm64-v8a
        if: steps.check_release.outputs.exists == 'false'
        run: ./build.sh arm64-v8a
        
      - name: Sign arm64-v8a
        if: steps.check_release.outputs.exists == 'false'
        run: |
          # Find the actual APK file generated by the build script
          APK_FILE=$(find . -name "*.apk" ! -name "*-signed.apk" -type f | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "No APK file found!"
            ls -la
            exit 1
          fi
          
          echo "Found APK: $APK_FILE"
          
          # Sign the APK
          apksigner sign \
            --ks $STORE_FILE \
            --ks-pass pass:$STORE_PASSWORD \
            --key-pass pass:$KEY_PASSWORD \
            --ks-key-alias $KEY_ALIAS \
            --out arm64-v8a-signed.apk \
            "$APK_FILE"
            
      - name: Post Checkout repo
        if: steps.check_release.outputs.exists == 'false'
        run: echo "Build completed successfully"
        
      - name: Post Set up JDK 11  
        if: steps.check_release.outputs.exists == 'false'
        run: echo "JDK setup completed"
        
      - name: Publish release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.waterfox_version.outputs.version }}
          name: "AMOLED Waterfox ${{ steps.waterfox_version.outputs.version }}"
          files: |
            armeabi-v7a-signed.apk
            arm64-v8a-signed.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
